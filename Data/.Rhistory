model_name = "celerit2",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./C',
'celerite2.hpp'), '"\n'))
getwd()
installed.packages()[, "Package"]
install.packages("rstan", dependencies = TRUE)
install.packages("rstan", dependencies = TRUE)
install.packages("rstan", dependencies = TRUE)
list.files(path = "./C", pattern = "celerite2.hpp", recursive = TRUE, full.names = TRUE)
pkgbuild::has_rtools()
install.packages(c("StanHeaders", "rstan"), dependencies = TRUE)
modelcelerite <- stan_model(file = './Stan/celerite-missing-handling.stan',
model_name = "celerit2",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./C',
'celerite2.hpp'), '"\n'))
library(rstan)
library(dplyr)
library(ggpubr)
library(ggplot2)
options(mc.cores = parallel::detectCores()/2)
rstan_options(auto_write = TRUE)
source("./R/misc.R") # Helper functions
celeritedata <- list(N=N, t = rawdata[,1],
y = rawdata[,2],
observed = observed,
sigma_prior = c(-8,8),
Q0_prior = c(0,8), # This values seem to work for most stars
dQ_prior = c(-8,8),
period_prior = c(-8,8),
f_prior = c(1e-6,1-1e-6),
alpha_quiet = c(1,.1),
alpha_firing = c(1,1),
alpha_decay = c(1,.1,1),
mu0_quiet = 0,
lambda_quiet = .01,
gamma_noise = c(0.01,0.01),
mu0_rate_firing = 0,
sigma_rate_firing = 1e3,
mu0_rate_decay = 0,
sigma_rate_decay = 1e3,
diag = rep(1e-6,N)
celeritedata$err_prior <- c(0.01, 0.01)
celeritedata <- list(N=N, t = rawdata[,1],
y = rawdata[,2],
observed = observed,
sigma_prior = c(-8,8),
Q0_prior = c(0,8), # This values seem to work for most stars
dQ_prior = c(-8,8),
period_prior = c(-8,8),
f_prior = c(1e-6,1-1e-6),
alpha_quiet = c(1,.1),
alpha_firing = c(1,1),
alpha_decay = c(1,.1,1),
mu0_quiet = 0,
lambda_quiet = .01,
gamma_noise = c(0.01,0.01),
mu0_rate_firing = 0,
sigma_rate_firing = 1e3,
mu0_rate_decay = 0,
sigma_rate_decay = 1e3,
diag = rep(1e-6,N))
celeritedata$err_prior <- c(0.01, 0.01)
modelcelerite <- stan_model(file = './Stan/celerite-missing-handling.stan',
model_name = "celerit2",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./C',
'celerite2.hpp'), '"\n'))
modelcelerite <- stan_model(file = './Stan/celerite-missing-handling.stan',
model_name = "celerit2",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./C',
'celerite2.hpp'), '"\n'))
getwd()
modelcelerite <- stan_model(file = './Stan/celerite-missing-handling.stan',
model_name = "celerit2",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./C',
'celerite2.hpp'), '"\n'))
modelcelerite <- stan_model(
file = "./Stan/celerite-missing-handling.stan",
model_name = "celerite",
allow_undefined = TRUE,
includes = paste0('\n#include "', normalizePath("./C/celerite2.hpp", mustWork = TRUE), '"\n')
)
View(rawdata)
View(rawdata)
View(celeritedata)
install.packages(c("rstan", "StanHeaders", "Rcpp", "RcppEigen"), dependencies = TRUE)
setwd("~/Documents/Doctorado/Stellar_Flares/Code/celerite_stellar_flare")
library(rstan)
library(dplyr)
library(ggpubr)
library(ggplot2)
options(mc.cores = parallel::detectCores()/2)
rstan_options(auto_write = TRUE)
source("./R/misc.R") # Helper functions
modelcelerite <- stan_model(file = './Stan/celerite-missing-handling.stan',
model_name = "celerit2",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./C',
'celerite2.hpp'), '"\n'))
modelcelerite <- stan_model(
file = "./Stan/celerite-missing-handling.stan",
model_name = "celerite",
allow_undefined = TRUE,
includes = paste0('\n#include "', normalizePath("./C/celerite2.hpp", mustWork = TRUE), '"\n')
)
Sys.setenv(CXXFLAGS = paste0("-isysroot ", system("xcrun --show-sdk-path", intern = TRUE)))
Sys.setenv(CXX = "clang++")
normalizePath("./C/celerite2.hpp", mustWork = TRUE)
modelcelerite <- stan_model(
file = "./Stan/celerite-missing-handling.stan",
model_name = "celerite",
allow_undefined = TRUE,
includes = paste0('\n#include "', normalizePath("./C/celerite2.hpp", mustWork = TRUE), '"\n')
)
modelcelerite <- stan_model(file = './Stan/celerite-missing-handling.stan',
model_name = "celerit2",
allow_undefined = TRUE,
verbose = TRUE,
includes = paste0('\n#include "',
file.path('./C',
'celerite2.hpp'), '"\n'))
library(rstan)
library(dplyr)
library(ggpubr)
library(ggplot2)
options(mc.cores = parallel::detectCores()/2)
rstan_options(auto_write = TRUE)
source("./celeriteQFD/R/misc.R")
setwd("~/Downloads")
rstan_options(auto_write = TRUE)
source("./celeriteQFD/R/misc.R")
rawdata <- read.csv("./celeriteQFD/Data/tess2018206045859-s0001-0000000031381302-0120-s_lc.csv")[6000:8000,c("TIME","PDCSAP_FLUX")]
rawdata[,2] <- rawdata[,2] - mean(rawdata[,2], na.rm = TRUE)
observed <- (!is.na(rawdata[,2])) * 1
rawdata[is.na(rawdata[,2]),2] <- 0
N <- nrow(rawdata)
tt <- rawdata[,1]
# Fit celeriteQFD
QFD_data <- list(N=N, t = rawdata[,1],
y = rawdata[,2],
observed = observed,
sigma_prior = c(-8,8),
Q0_prior = c(0,8), # This values seem to work for most stars
dQ_prior = c(-8,8),
period_prior = c(-8,8),
f_prior = c(1e-6,1-1e-6),
alpha_quiet = c(1,.1),
alpha_firing = c(1,1),
alpha_decay = c(1,.1,1),
mu0_quiet = 0,
lambda_quiet = .01,
gamma_noise = c(0.01,0.01),
mu0_rate_firing = 0,
sigma_rate_firing = 1e3,
mu0_rate_decay = 0,
sigma_rate_decay = 1e3,
diag = rep(1e-6,N)
)
modelcelerite <- stan_model(file = './celeriteQFD/Stan/Prototypes/Celerite/celerite-missing-handling.stan',
model_name = "celerit2",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./celeriteQFD/',
'celerite2/celerite2.hpp'), '"\n'))
modelcelerite <- stan_model(file = './celeriteQFD/Stan/Prototypes/Celerite/celerite-missing-handling.stan',
model_name = "celerit2",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./celeriteQFD/',
'celerite2/celerite2.hpp'), '"\n'))
library(rstan)
library(dplyr)
library(ggpubr)
library(ggplot2)
options(mc.cores = parallel::detectCores()/2)
rstan_options(auto_write = TRUE)
source("./celeriteQFD/R/misc.R") # Helper functions
# run QFD
rawdata <- read.csv("./celeriteQFD/Data/tess2018206045859-s0001-0000000031381302-0120-s_lc.csv")[6000:8000,c("TIME","PDCSAP_FLUX")]
rawdata[,2] <- rawdata[,2] - mean(rawdata[,2], na.rm = TRUE)
observed <- (!is.na(rawdata[,2])) * 1
rawdata[is.na(rawdata[,2]),2] <- 0
N <- nrow(rawdata)
tt <- rawdata[,1]
# Fit celeriteQFD
QFD_data <- list(N=N, t = rawdata[,1],
y = rawdata[,2],
observed = observed,
sigma_prior = c(-8,8),
Q0_prior = c(0,8), # This values seem to work for most stars
dQ_prior = c(-8,8),
period_prior = c(-8,8),
f_prior = c(1e-6,1-1e-6),
alpha_quiet = c(1,.1),
alpha_firing = c(1,1),
alpha_decay = c(1,.1,1),
mu0_quiet = 0,
lambda_quiet = .01,
gamma_noise = c(0.01,0.01),
mu0_rate_firing = 0,
sigma_rate_firing = 1e3,
mu0_rate_decay = 0,
sigma_rate_decay = 1e3,
diag = rep(1e-6,N)
)
modelQFD <- stan_model(file = './celeriteQFD/Stan/Morphology/QFD/CeleriteQFDexN-missing-handling.stan',
model_name = "celeritQFTexN",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./celeriteQFD',
'celerite2/celerite2.hpp'), '"\n'))
modelcelerite <- stan_model(file = './celeriteQFD/Stan/Prototypes/Celerite/celerite-missing-handling.stan',
model_name = "celerit2",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./celeriteQFD/',
'celerite2/celerite2.hpp'), '"\n'))
modelcelerite <- stan_model(file = './celeriteQFD/Stan/Prototypes/Celerite/celerite-missing-handling.stan',
model_name = "celerit2",
allow_undefined = TRUE,
includes = paste0('\n#include "',
file.path('./celeriteQFD/',
'celerite2/celerite2.hpp'), '"\n'))
setwd("~/Documents/Doctorado")
setwd("~/Documents/Doctorado/Stellar_Flares/Code/celerite_stellar_flare/Data")
df <- read.csv("Data_brightness.csv")
df <- df %>%
select(time, pdcsap_flux) %>%
arrange(time)
ggplot(df, aes(x = time, y = pdcsap_flux)) +
geom_line(color = "blue", alpha = 0.7) +
labs(title = "Time Series of Stellar Brightness (PDCSAP Flux)",
x = "Time (Days)", y = "Brightness (Flux)") +
theme_minimal()
window_size <- 50
df <- df %>%
mutate(rolling_mean = rollmean(pdcsap_flux, window_size, fill = NA, align = "right"),
rolling_std = rollapply(pdcsap_flux, window_size, sd, fill = NA, align = "right"))
ggplot(df, aes(x = time)) +
geom_line(aes(y = pdcsap_flux), color = "blue", alpha = 0.5) +
geom_line(aes(y = rolling_mean), color = "red", size = 1) +
geom_ribbon(aes(ymin = rolling_mean - rolling_std, ymax = rolling_mean + rolling_std),
fill = "gray", alpha = 0.3) +
labs(title = "Rolling Mean and Standard Deviation of PDCSAP Flux",
x = "Time (Days)", y = "Brightness (Flux)") +
theme_minimal()
window_size <- 50
df <- df %>%
mutate(rolling_mean = rollmean(pdcsap_flux, window_size, fill = NA, align = "right"),
rolling_std = rollapply(pdcsap_flux, window_size, sd, fill = NA, align = "right"))
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)
library(stats)
library(TSA)
install.packages("TSA")
library(ggplot2)
library(dplyr)
library(tidyr)
library(zoo)
library(stats)
library(TSA)
df$pdcsap_flux <- as.numeric(df$pdcsap_flux)
df <- df %>%
select(time, pdcsap_flux) %>%
arrange(time)
df <- df %>%
mutate(
rolling_mean = zoo::rollmean(pdcsap_flux, k = window_size, fill = NA, align = "right"),
rolling_std = zoo::rollapply(pdcsap_flux, width = window_size, FUN = sd, fill = NA, align = "right")
)
# Remove NA values before plotting
df_clean <- df %>% drop_na(rolling_mean, rolling_std)
# Plot Rolling Mean and Standard Deviation
ggplot(df_clean, aes(x = time)) +
geom_line(aes(y = pdcsap_flux), color = "blue", alpha = 0.5) +
geom_line(aes(y = rolling_mean), color = "red", size = 1) +
geom_ribbon(aes(ymin = rolling_mean - rolling_std, ymax = rolling_mean + rolling_std),
fill = "gray", alpha = 0.3) +
labs(title = "Rolling Mean and Standard Deviation of PDCSAP Flux",
x = "Time (Days)", y = "Brightness (Flux)") +
theme_minimal()
time_diff <- median(diff(df$time), na.rm = TRUE)  # Approximate sampling rate
freqs <- seq(0, 0.5 / time_diff, length.out = nrow(df))
fft_values <- abs(fft(df$pdcsap_flux))^2
power_spectrum <- data.frame(freq = freqs, power = fft_values[1:length(freqs)])
ggplot(power_spectrum, aes(x = freq, y = power)) +
geom_line(color = "purple") +
labs(title = "Power Spectrum of PDCSAP Flux",
x = "Frequency (1/Days)", y = "Power Spectral Density") +
xlim(0, max(freqs) / 10) +
theme_minimal()
df <- df[order(df$time), ]
time_diff <- median(diff(df$time), na.rm = TRUE)  # Approximate sampling rate
fs <- 1 / time_diff  # Sampling frequency (inverse of time step)
# Apply Fast Fourier Transform (FFT)
fft_values <- fft(df$pdcsap_flux)
n <- length(fft_values)
# Compute frequencies
freqs <- seq(0, fs / 2, length.out = floor(n / 2) + 1)
# Compute power spectrum (Magnitude Squared)
power_spectrum <- (Mod(fft_values)^2)[1:length(freqs)]  # Take first half
# Create data frame for plotting
fft_df <- data.frame(freq = freqs, power = power_spectrum)
# Plot Power Spectrum
ggplot(fft_df, aes(x = freq, y = power)) +
geom_line(color = "purple") +
labs(title = "Power Spectrum of PDCSAP Flux",
x = "Frequency (1/Days)", y = "Power Spectral Density") +
xlim(0, max(freqs) / 10) +  # Zoom into lower frequencies
theme_minimal()
fs <- 1 / time_diff  # Sampling frequency (1/time difference)
# Apply Fast Fourier Transform (FFT)
fft_values <- fft(df$pdcsap_flux)
n <- length(fft_values)
# Compute frequencies
freqs <- seq(0, fs / 2, length.out = floor(n / 2) + 1)
# Compute power spectrum (Magnitude Squared)
power_spectrum <- (Mod(fft_values)^2 / n)[1:length(freqs)]  # Normalize by dividing by n
# Create a data frame for plotting
fft_df <- data.frame(freq = freqs, power = power_spectrum)
# Plot the Power Spectrum
ggplot(fft_df, aes(x = freq, y = power)) +
geom_line(color = "purple") +
labs(title = "Power Spectrum of PDCSAP Flux",
x = "Frequency (1/Days)", y = "Power Spectral Density") +
xlim(0, max(freqs) / 10) +  # Focus on lower frequencies
theme_minimal()
fs <- 1 / time_diff  # Sampling frequency (inverse of time step)
# Apply Fast Fourier Transform (FFT)
fft_values <- fft(df$pdcsap_flux)
n <- length(fft_values)
# Compute frequencies (scaled to match Python's approach)
freqs <- seq(0, fs / 2, length.out = floor(n / 2) + 1)
# Compute power spectrum (magnitude squared and normalized)
power_spectrum <- (Mod(fft_values)^2 / n)[1:length(freqs)]  # Normalize by dividing by n
# Create data frame for plotting
fft_df <- data.frame(freq = freqs, power = power_spectrum)
# Plot the Power Spectrum
ggplot(fft_df, aes(x = freq, y = power)) +
geom_line(color = "purple") +
labs(title = "Power Spectrum of PDCSAP Flux",
x = "Frequency (1/Days)", y = "Power Spectral Density") +
xlim(0, 10) +  # Focus on relevant frequency range
theme_minimal()
median_time_diff <- median(time_diff, na.rm = TRUE)  # Median sampling interval
fs <- 1 / median_time_diff  # Sampling frequency (1/day)
# Apply FFT
fft_values <- fft(df$pdcsap_flux)
n <- length(fft_values)
# Compute frequencies (matching Python)
freqs <- seq(0, fs / 2, length.out = floor(n / 2) + 1)
# Compute power spectrum (magnitude squared, normalized)
power_spectrum <- (Mod(fft_values[1:length(freqs)])^2) / n  # Normalize by n
# Create data frame for plotting
fft_df <- data.frame(freq = freqs, power = power_spectrum)
# Plot the Power Spectrum
ggplot(fft_df, aes(x = freq, y = power)) +
geom_line(color = "purple") +
labs(title = "Power Spectrum of PDCSAP Flux",
x = "Frequency (1/Days)", y = "Power Spectral Density") +
xlim(0, 10) +  # Focus on relevant frequency range
theme_minimal()
time_diff <- diff(df$time)
median_time_diff <- median(time_diff, na.rm = TRUE)
fs <- 1 / median_time_diff  # Sampling frequency
# Apply FFT
fft_values <- fft(df$pdcsap_flux)
n <- length(fft_values)
# Compute frequencies and power spectrum
freqs <- seq(0, fs / 2, length.out = floor(n / 2) + 1)
power_spectrum <- (Mod(fft_values[1:length(freqs)])^2) / n  # Normalize by n
# Check for invalid values in power spectrum
valid_idx <- !is.na(power_spectrum) & !is.infinite(power_spectrum)
freqs <- freqs[valid_idx]
power_spectrum <- power_spectrum[valid_idx]
# Create data frame for plotting
fft_df <- data.frame(freq = freqs, power = power_spectrum)
# Plot the Power Spectrum
ggplot(fft_df, aes(x = freq, y = power)) +
geom_line(color = "purple") +
labs(title = "Power Spectrum of PDCSAP Flux",
x = "Frequency (1/Days)", y = "Power Spectral Density") +
xlim(0, 10) +  # Focus on relevant frequency range
theme_minimal()
time_diff <- diff(df$time)
fs <- 1 / median(time_diff, na.rm = TRUE)  # Sampling frequency
# Apply FFT (direct translation of Python FFT logic)
fft_values <- fft(df$pdcsap_flux)
n <- length(fft_values)
# Compute frequencies (matching Python np.fft.fftfreq)
freqs <- seq(0, fs / 2, length.out = floor(n / 2) + 1)
# Compute power spectrum (magnitude squared and normalized)
power_spectrum <- abs(fft_values[1:length(freqs)])^2 / n
# Create a data frame for plotting
fft_df <- data.frame(freq = freqs, power = power_spectrum)
# Plot the Power Spectrum
ggplot(fft_df, aes(x = freq, y = power)) +
geom_line(color = "purple") +
labs(title = "Power Spectrum of PDCSAP Flux",
x = "Frequency (1/Days)", y = "Power Spectral Density") +
xlim(0, 10) +  # Focus on relevant frequency range
theme_minimal()
df$pdcsap_flux <- df$pdcsap_flux - mean(df$pdcsap_flux, na.rm = TRUE)
# Calculate the sampling frequency (fs) as in Python
time_diff <- diff(df$time)
fs <- 1 / median(time_diff, na.rm = TRUE)  # Sampling frequency
# Apply FFT
fft_values <- fft(df$pdcsap_flux)
n <- length(fft_values)
# Compute frequencies (matching Python np.fft.fftfreq)
freqs <- seq(0, fs / 2, length.out = floor(n / 2) + 1)
# Compute power spectrum (magnitude squared and normalized)
power_spectrum <- abs(fft_values[1:length(freqs)])^2 / n
# Create a data frame for plotting
fft_df <- data.frame(freq = freqs, power = power_spectrum)
# Plot the Power Spectrum
ggplot(fft_df, aes(x = freq, y = power)) +
geom_line(color = "purple") +
labs(title = "Power Spectrum of PDCSAP Flux",
x = "Frequency (1/Days)", y = "Power Spectral Density") +
xlim(0, 10) +  # Focus on relevant frequency range
theme_minimal()
acf(df$pdcsap_flux, lag.max = 100, main = "Autocorrelation Function (ACF)")
pacf(df$pdcsap_flux, lag.max = 50, main = "Partial Autocorrelation Function (PACF)")
par(mfrow = c(1, 1))
df_ts <- ts(df$pdcsap_flux, frequency = round(1 / 0.167))  # Set frequency based on period ~0.167 days
decomp <- decompose(df_ts)
df_ts <- ts(df$pdcsap_flux, frequency = round(1 / 0.167))  # Set frequency based on period ~0.167 days
decomp <- decompose(df_ts)
par(mfrow = c(1, 1))
acf(df$pdcsap_flux, lag.max = 100, main = "Autocorrelation Function (ACF)")
pacf(df$pdcsap_flux, lag.max = 50, main = "Partial Autocorrelation Function (PACF)")
par(mfrow = c(1, 1))
par(mfrow = c(1, 1))
acf(df$pdcsap_flux, lag.max = 100, main = "Autocorrelation Function (ACF)")
pacf(df$pdcsap_flux, lag.max = 50, main = "Partial Autocorrelation Function (PACF)")
par(mfrow = c(1, 2))
df_ts <- ts(df$pdcsap_flux, frequency = round(1 / 0.167))  # Set frequency based on period ~0.167 days
decomp <- decompose(df_ts)
par(mfrow = c(1, 2))
acf(df$pdcsap_flux, lag.max = 100, main = "Autocorrelation Function (ACF)")
pacf(df$pdcsap_flux, lag.max = 50, main = "Partial Autocorrelation Function (PACF)")
par(mfrow = c(2, 1))
acf(df$pdcsap_flux, lag.max = 100, main = "Autocorrelation Function (ACF)")
acf(df$pdcsap_flux, lag.max = 100, main = "Autocorrelation Function (ACF)")
par(mfrow = c(1, 1))
acf(df$pdcsap_flux, lag.max = 100, main = "")
pacf(df$pdcsap_flux, lag.max = 50, main = "")
df_ts <- ts(df$pdcsap_flux, frequency = round(1 / 0.167))  # Set frequency based on period ~0.167 days
decomp <- decompose(df_ts)
par(mfrow = c(4, 1))
plot(df_ts, main = "Observed Time Series", col = "blue")
plot(df_ts, main = "Observed Time Series", col = "blue")
par(mfrow = c(1, 1))
plot(df_ts, main = "Observed Time Series", col = "blue")
plot(decomp$trend, main = "Trend Component", col = "red")
plot(decomp$seasonal, main = "Seasonal Component", col = "green")
plot(decomp$random, main = "Residuals", col = "gray")
plot(df_ts, main = "Observed Time Series", col = "blue", y ="")
plot(df_ts, main = "Observed Time Series", col = "blue", ylab = "")
plot(df_ts, main = "Observed Time Series", col = "blue", ylab = "")
plot(decomp$trend, main = "Trend Component", col = "red", ylab = "")
plot(decomp$seasonal, main = "Seasonal Component", col = "green", ylab = "")
plot(decomp$random, main = "Residuals", col = "gray", ylab = "")
par(mfrow = c(4, 1))
plot(df_ts, main = "Observed Time Series", col = "blue", ylab = "")
plot(df_ts, main = "Observed Time Series", col = "blue", ylab = "")
par(mfrow = c(1, 1))
plot(df_ts, main = "Observed Time Series", col = "blue", ylab = "")
plot(df_ts, main = "", col = "blue", ylab = "")
plot(decomp$trend, main = "", col = "red", ylab = "")
plot(decomp$seasonal, main = "", col = "green", ylab = "")
plot(decomp$random, main = "Residuals", col = "gray", ylab = "")
ggplot(fft_df, aes(x = freq, y = power)) +
geom_line(color = "purple") +
labs(title = "Power Spectrum of PDCSAP Flux",
x = "Frequency (1/Days)", y = "Power Spectral Density") +
xlim(0, 10) +  # Focus on relevant frequency range
theme_minimal()
ggplot(fft_df, aes(x = freq, y = power)) +
geom_line(color = "purple") +
labs(title = "",
x = "Frequency (1/Days)", y = "Power Spectral Density") +
xlim(0, 10) +  # Focus on relevant frequency range
theme_minimal()
ggplot(df_clean, aes(x = time)) +
geom_line(aes(y = pdcsap_flux), color = "blue", alpha = 0.5) +
geom_line(aes(y = rolling_mean), color = "red", size = 1) +
geom_ribbon(aes(ymin = rolling_mean - rolling_std, ymax = rolling_mean + rolling_std),
fill = "gray", alpha = 0.3) +
labs(title = "",
x = "Time (Days)", y = "Brightness (Flux)") +
theme_minimal()
# Time Series Plot
ggplot(df, aes(x = time, y = pdcsap_flux)) +
geom_line(color = "blue", alpha = 0.7) +
labs(title = "",
x = "Time (Days)", y = "Brightness (Flux)") +
theme_minimal()
